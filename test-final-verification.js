#!/usr/bin/env node
// Test final para verificar que jackett y la importaci√≥n funcionen correctamente

const { execSync } = require('child_process');
const fs = require('fs');

console.log('üîç VERIFICACI√ìN FINAL - Jackett Widget y Importaci√≥n');
console.log('='.repeat(60));

// 1. Verificar que la aplicaci√≥n est√© ejecut√°ndose
console.log('\n1. ‚úÖ Verificando aplicaci√≥n...');
try {
  const response = execSync('curl -s -o /dev/null -w "%{http_code}" http://localhost:3001', {encoding: 'utf8'});
  if (response.trim() === '200') {
    console.log('   ‚úÖ Aplicaci√≥n ejecut√°ndose correctamente en http://localhost:3001');
  } else {
    throw new Error(`HTTP ${response}`);
  }
} catch (error) {
  console.log('   ‚ùå Aplicaci√≥n no disponible:', error.message);
  process.exit(1);
}

// 2. Verificar que jackett est√© en ServiceForm.js
console.log('\n2. ‚úÖ Verificando configuraci√≥n de Jackett...');
try {
  const serviceFormContent = fs.readFileSync('./src/components/ServiceForm.js', 'utf8');
  
  if (serviceFormContent.includes("{ value: 'jackett', label: 'Jackett', category: 'Downloads' }")) {
    console.log('   ‚úÖ Jackett encontrado en WIDGET_TYPES');
  } else {
    console.log('   ‚ùå Jackett NO encontrado en WIDGET_TYPES');
  }
  
  if (serviceFormContent.includes("'jackett': {") && serviceFormContent.includes("url: { type: 'url', label: 'Jackett URL'")) {
    console.log('   ‚úÖ Configuraci√≥n de Jackett encontrada en WIDGET_PARAMETERS');
  } else {
    console.log('   ‚ùå Configuraci√≥n de Jackett NO encontrada en WIDGET_PARAMETERS');
  }
} catch (error) {
  console.log('   ‚ùå Error verificando ServiceForm.js:', error.message);
}

// 3. Verificar archivo de prueba
console.log('\n3. ‚úÖ Verificando archivo de prueba...');
if (fs.existsSync('./test-example.yaml')) {
  console.log('   ‚úÖ Archivo test-example.yaml existe');
  const content = fs.readFileSync('./test-example.yaml', 'utf8');
  const lines = content.split('\n').length;
  console.log(`   ‚ÑπÔ∏è  Archivo contiene ${lines} l√≠neas`);
} else {
  console.log('   ‚ùå Archivo test-example.yaml NO existe');
}

// 4. Verificar fix de importaci√≥n
console.log('\n4. ‚úÖ Verificando fix de importaci√≥n...');
try {
  const dragDropContent = fs.readFileSync('./src/components/DragDropBuilder.js', 'utf8');
  
  if (dragDropContent.includes('const newConfig = {') && dragDropContent.includes('[...(importedConfig.services || [])]')) {
    console.log('   ‚úÖ Fix de importaci√≥n aplicado (creaci√≥n de nuevas referencias)');
  } else {
    console.log('   ‚ùå Fix de importaci√≥n NO aplicado');
  }
} catch (error) {
  console.log('   ‚ùå Error verificando DragDropBuilder.js:', error.message);
}

console.log('\nüéØ INSTRUCCIONES PARA PRUEBA MANUAL:');
console.log('='.repeat(60));
console.log('1. Abrir http://localhost:3001 en el navegador');
console.log('2. Ir a la pesta√±a "Services"');
console.log('3. Agregar un nuevo servicio');
console.log('4. En "Widget Type", buscar "Jackett" en la categor√≠a "Downloads"');
console.log('5. Verificar que aparezcan los campos: URL, Username (opcional), Password (opcional)');
console.log('');
console.log('6. Para probar importaci√≥n:');
console.log('   - Arrastrar el archivo test-example.yaml al √°rea de importaci√≥n');
console.log('   - Hacer clic en "Importar Configuraci√≥n"');
console.log('   - Verificar que el estado muestre: "6 servicios, 0 widgets, 0 marcadores"');
console.log('   - Verificar que aparezcan los servicios en las pesta√±as');
console.log('');
console.log('‚úÖ Si todo funciona correctamente, las tareas est√°n COMPLETADAS');
